// <auto-generated />
using System;
using AthStitcher.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AthStitcher.Migrations
{
    [DbContext(typeof(AthStitcherDbContext))]
    [Migration("20251014052202_InitialFullSchema")]
    partial class InitialFullSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("AthStitcher.Data.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AgeGrouping")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(100);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Distance")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EventNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(100);

                    b.Property<int?>("HeatNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HurdleSteepleHeight")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MastersAgeGroup")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MeetId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sex")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StandardAgeGroup")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("TEXT");

                    b.Property<int>("TrackType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(100);

                    b.Property<string>("VideoFile")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoImageFile")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoInfoFile")
                        .HasColumnType("TEXT");

                    b.Property<double?>("VideoStartOffsetSeconds")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("MeetId");

                    b.ToTable("Events", null, t =>
                        {
                            t.HasCheckConstraint("CK_Events_AgeGrouping", "AgeGrouping IN (0,1,2,100)");

                            t.HasCheckConstraint("CK_Events_Gender", "Gender IN (0,1,2,100)");

                            t.HasCheckConstraint("CK_Events_TrackType", "TrackType IN (0,1,2,3,4,100)");
                        });
                });

            modelBuilder.Entity("AthStitcher.Data.Meet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Meets", (string)null);
                });

            modelBuilder.Entity("AthStitcher.Data.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BibNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Lane")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double?>("ResultSeconds")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Results", (string)null);
                });

            modelBuilder.Entity("AthStitcher.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ForcePasswordChange")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("AthStitcher.Data.Event", b =>
                {
                    b.HasOne("AthStitcher.Data.Meet", "Meet")
                        .WithMany()
                        .HasForeignKey("MeetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meet");
                });

            modelBuilder.Entity("AthStitcher.Data.Result", b =>
                {
                    b.HasOne("AthStitcher.Data.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });
#pragma warning restore 612, 618
        }
    }
}
